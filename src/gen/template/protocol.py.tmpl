#* main entry

#load "utils.texhon" as utils


#template main( config_dict, class_name, send_messages, receive_messages )
#!
#!  message_id_type = config_dict['message_id_type']
#!
#!
\#
\# File was automatically generated using protocol generator.
\#

from analyzerlib.channel import AbstractChannel


\# pylint: disable=C0103


class $class_name:
    def __init__(self, channel: AbstractChannel):
        self.channel: AbstractChannel = channel  # communication medium

    def receive_message(self):
#{  if message_id_type == "str": 
        command = self.channel.read_text()
#}
#{  else:
        command = self.channel.read_int(1)
#}

        if command is None:
            print("unhandled message (None)")
            return [None, None]

#{  for message_def in receive_messages:
#! 		message_id = message_def['id']
#! 		message_value = message_def['value']
#!      message_params = message_def['params']
        # $message_id
#{		if message_params:
        ## parameters:
#{			for param in message_params:
        ##    ${ param['id'] }: ${ param['type'] }
#}
#}
        if command == $message_value:
#{		if message_params:
#{		    for param in message_params:
                $<${ read_param(param) }
#}
#!          param_names    = message_def['param_names']
#!          params_header  = utils.params_explode( param_names )
            return [command, $params_header]
#}
#{		else:
            # no params
            return [command]
#}

#}
        print(f"unknown message: '{command}'")
        return [None, command]

    ## ============= send methods ===============
$>
#{	for message_def in send_messages:
#!  	message_id     = message_def['id']
#!  	message_value  = message_def['value']
#!      message_params = message_def['params']
#!      param_names    = message_def['param_names']
#!      params_header  = utils.params_explode( [ "self" ] + param_names )

    ## send '$message_id' message
#{		if message_params:
    ## parameters:
#{			for param in message_params:
    ##    ${ param['id'] }: ${ param['type'] }
#}
#}
    def send_$message_id($params_header):
#{      if message_id_type == "str": 
        self.channel.write_text($message_value)
#}
#{      else:
        self.channel.write_int($message_value, 1)  # "$message_id"
#}
#{		for param in message_params:
            $<${ write_param(param) }
#}
#}
#end template


#template read_param( param_data )
#!  param_id = param_data['id']
#! 	param_type = param_data["type"]
#{	if param_type == "byte":
            $param_id = self.channel.read_int(1)$>
#}
#{	elif param_type == "int":
            $param_id = self.channel.read_int(2)$>
#}
#{	elif param_type == "bytearray":
            data_size = self.channel.read_int(2)
            $param_id = self.channel.read_bytes(data_size)$>
#}
#{	elif param_type == "str":
            $param_id = self.channel.read_text()$>
#}
#{ else:
		    # unknown param type '${param_type}' for '${param_id}'$>
#}
#end template


#template write_param( param_data )
#!  param_id = param_data['id']
#! 	param_type = param_data["type"]
#{	if param_type == "byte":
        self.channel.write_int($param_id, 1)$>
#}
#{	elif param_type == "int":
        self.channel.write_int($param_id, 2)$>
#}
#{	elif param_type == "bytearray":
        self.channel.write_int(len($param_id), 2)
        self.channel.write_bytes($param_id)$>
#}
#{	elif param_type == "str":
        self.channel.write_text($param_id)$>
#}
#{ else:
		# unknown param type '${param_type}' for '${param_id}'$>
#}
#end template
